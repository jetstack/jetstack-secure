package logs_test

import (
	"bytes"
	"context"
	"errors"
	"log"
	"log/slog"
	"os"
	"os/exec"
	"strings"
	"testing"
	"time"

	_ "github.com/Venafi/vcert/v5"
	"github.com/spf13/pflag"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"k8s.io/klog/v2"

	"github.com/jetstack/preflight/pkg/logs"
)

// TestLogs demonstrates how the logging flags affect the logging output.
//
// The test executes itself with as a sub-process to avoid mutating the global
// logging configuration.
//
// Inspired by:
// - https://stackoverflow.com/a/67945462
// - https://go.dev/src/flag/flag_test.go (TestExitCode)
func TestLogs(t *testing.T) {
	if flags, found := os.LookupEnv("GO_CHILD_FLAG"); found {
		if _, found := os.LookupEnv("GO_CHILD_SKIP_INITIALIZE"); !found {
			fs := pflag.NewFlagSet("test-logs", pflag.ExitOnError)
			logs.AddFlags(fs)
			fs.Parse(strings.Split(flags, " "))
			logs.Initialize()

			// Remember to not use `assert.Equal` from within the sub-process
			// since (for some reason) `assert.Equal` doesn't cause the test
			// sub-process to exit with 1. Instead, it exits with 0, which means
			// we can't notice the error from the parent process.
			require.Equal(t, "", log.Prefix(), "logs.Initialize should remove the `vCert: ` prefix from the global log logger")
		}

		log.Print("log Print")
		slog.Info("slog Info")
		slog.Warn("slog Warn")
		slog.Error("slog Error")
		klog.Info("klog Info")
		klog.Warning("klog Warning")
		klog.ErrorS(errors.New("fake-error"), "klog Error")
		klog.InfoS("klog InfoS", "key", "value")
		logger := klog.FromContext(context.Background()).WithName("foo")
		logger.V(3).Info("Contextual Info Level 3", "key", "value")
		logger.Error(errors.New("fake-error"), "Contextual error", "key", "value")

		klog.FlushAndExit(time.Second, 0)
	}

	tests := []struct {
		name          string
		flags         string
		skipIntialize bool
		expectError   bool
	}{
		{
			name:        "help",
			flags:       "-h",
			expectError: true,
		},
		{
			name:        "unrecognized-flag",
			flags:       "--foo",
			expectError: true,
		},
		{
			name:        "logging-format-unrecognized",
			flags:       "--logging-format=foo",
			expectError: true,
		},
		{
			name:          "original-defaults",
			flags:         "",
			skipIntialize: true,
		},
		{
			name:  "modified-defaults",
			flags: "",
		},
		{
			name:  "logging-format-json",
			flags: "--logging-format=json",
		},
		{
			name:  "log-json-split-stream-false",
			flags: "--logging-format=json --log-json-split-stream=false",
		},
		{
			name:  "logging-format-text",
			flags: "--logging-format=text",
		},
		{
			name:  "log-text-split-stream-false",
			flags: "--logging-format=text --log-text-split-stream=false",
		},
		{
			name:  "v-level-3",
			flags: "--v=3",
		},
		{
			name:  "vmodule-level-3",
			flags: "--logging-format=text --vmodule=logs_test=3",
		},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			cmd := exec.Command(os.Args[0], "-test.run=^TestLogs$", "-test.v")
			var (
				stdout bytes.Buffer
				stderr bytes.Buffer
			)
			cmd.Stdout = &stdout
			cmd.Stderr = &stderr
			cmd.Env = append(
				os.Environ(),
				"GO_CHILD_FLAG="+test.flags,
			)
			if test.skipIntialize {
				cmd.Env = append(
					cmd.Env,
					"GO_CHILD_SKIP_INITIALIZE=true",
				)
			}
			err := cmd.Run()

			t.Logf("FLAGS\n%s\n", test.flags)
			// Remove the standard output generated by `-test.v`
			t.Logf("STDOUT\n%s\n", strings.TrimPrefix(stdout.String(), "=== RUN   TestLogs\n"))
			t.Logf("STDERR\n%s\n", stderr.String())
			if test.expectError {
				var target *exec.ExitError
				require.ErrorAs(t, err, &target)
				require.Equal(t, 2, target.ExitCode(), "Flag parsing failures should always result in exit code 2")
				t.Logf("ERROR: %v", err)
			} else {
				require.NoError(t, err)
			}
		})
	}
}
